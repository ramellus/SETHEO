#!/bin/sh
#
#
echo "Equality generator for SETHEO V1.0 (%W% %G%)" 1>&2
# changes
#

#################################################
# SHELL VARIABLES which must be set
#################################################
SETHEOHOME=/home/schumann/bin

INWASM=$SETHEOHOME/inwasm
WASM=$SETHEOHOME/wasm
SAM=$SETHEOHOME/sam

NAWK=gawk

#################################################
# Names of temp. files
#################################################
	# TMP = prefix for all temp files
TMP=/tmp/eqgen$$
ALL_LOG=$TMP.all_log

# definitions
#
ALL=y
VERBOSE=n
COMMENT=y

#
# clean up a little bit first
#
rm -f ${TMP}.* 

#
# process arguments
#
ARGS=$*

if [ -z "$1$EMPTY" ] ; then
	echo "usage: eqgen "
	echo "	[-all]		"
	echo "	[-verbose]		"
	echo "	[-nocomment]		"
	echo "	[-pred name arity ]	"
	echo "	[-func name arity ]	"
	exit 1
fi

cp /dev/null $TMP.pred
cp /dev/null $TMP.func

while [ -n "$1$EMPTY" ] ; do
#	echo "processing $1"
	case $1 in
	
	-pred) echo "$2	$3" >>$TMP.pred	; shift;shift ;;
	-fu) echo "$2	$3" >>$TMP.func	; shift;shift ;;
	-all) ALL=y;;
	-verbose) VERBOSE=y;;
	-nocomment) COMMENT=n;;
	-*) echo "illegal flag $1 " ; exit 1 ;;
	*) FILE=$1			;;

	esac

	shift
	done

if [ -z "$FILE$EMPTY"  ] ; then
	echo "no input file"
	exit 2
	fi
	

if [ ! -f $FILE.lop ] ; then
	echo "cannot open input file $FILE"
	exit 2
	fi

#################################################
# clean up after an interrupt
#################################################
trap 'if test $DEBUG = "n" ; then rm -f $TMP.*; fi ; exit 3' 2 3 9 

#################################################
# extract all predicate symbols (-all)
#################################################
if [ $ALL = "y" ] ; then
	cat <<! >$TMP.in.lop
<-ppp__qqq.
ppp__qqq<-.
!

	cat $FILE.lop >>$TMP.in.lop
#	cp $FILE.lop $TMP.in.lop
	$INWASM  -scode $TMP.in >$ALL_LOG 2>&1 

    if [ $? -eq 0 ] ; then
	# extract predicate symbols
	sed -e '1,/"\$told"/d' \
	    -e '/ppp__qqq/d'  \
            -e 's/^	\.symb	"\([a-z][A-Za-z0-9_]*\)",	pred,[ 	]*\([0-9][0-9]*\).*$/\1 \2/' $TMP.in.s >$TMP.pred

	# extract function symbols
	sed -e '1,/"-_"/d' \
	    -e '/\.symb.*const,/!d' \
            -e 's/^	\.symb	"\([a-z][A-Za-z0-9_]*\)",	const,[ 	]*\([0-9][0-9]*\).*$/\1 \2/' $TMP.in.s >$TMP.func

	if [ -n "`fgrep 'non H' $TMP.in.s`$EMPTY" ] ; then
		HORN=n
	fi
	
    else
	echo "syntax error in formula: eqgen aborted"
	cat $ALL_LOG
	echo rm -f ${TMP}.* 
	exit 1
    fi
fi

if [ `wc -l $TMP.pred | awk '{print $1}'` -eq 0  -o \
	`wc -l $TMP.func | awk '{print $1}'` -eq 0 ] ; then
	echo "must specify a`-all or -pred and -func "
	echo "if -all was given: syntax error in formula"
	exit 1
	fi

#################################################
# 
#################################################
if [ $VERBOSE = "y" ] ; then
	echo "eqgen is running with the following data:"
	echo "FILE = $FILE"
	echo "HORN = $HORN"
	echo "predicates:"
	cat $TMP.pred
	echo "function symbols:"
	cat $TMP.func
fi


#################################################
# generation of the additional axioms
#################################################
$NAWK  \
-v HORN=$HORN -v COMMENT=$COMMENT \
'BEGIN {
 if (COMMENT == "y")
 	print "/* equality axioms generated by eqgen(c) */"
 print "equal(X,X) <- ."
 print "equal(X,Y) <- equal(Y,X)."
 print "equal(X,Z) <- equal(X,Y), equal(Y,Z)."
 print ""
PAROPEN="(";
PARCLOSE=")";
 }
 {
 if ($2 >= 1 && $1 != "equal" ){
   for (k=0;k < $2; k++){

	printf("%s%s",$1,PAROPEN);
	for (i=0; i< $2; i++){
		printf("X%d",i+off);
		if (i < $2 -1) printf(",");
		}
	print PARCLOSE " <- "

	printf("\t%s%s",$1,PAROPEN);
	for (i=0; i< $2; i++){
		if (i == k){
			printf("Y%d",i+off);
			}
		else {
			printf("X%d",i+off);
			}
		if (i < $2 -1) printf(",");
		}
	print PARCLOSE ", equal(X"k ",Y"k ")."
	}
	}
}' $TMP.pred

$NAWK  \
-v HORN=$HORN  \
'BEGIN {
PAROPEN="(";
PARCLOSE=")";
 }
 {
 if ($2 >= 1 ){
   for (k=0;k < $2; k++){

	printf("equal(%s%s",$1,PAROPEN);
	for (i=0; i< $2; i++){
		printf("X%d",i+off);
		if (i < $2 -1) printf(",");
		}
	printf("%s,%s%s",PARCLOSE,$1,PAROPEN);
	for (i=0; i< $2; i++){
		if (i == k){
			printf("Y%d",i+off);
			}
		else {
			printf("X%d",i+off);
			}
		if (i < $2 -1) printf(",");
		}
	print PARCLOSE ") <- equal(X"k ",Y"k ")."
	}
	}
}' $TMP.func

