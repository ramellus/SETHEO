#!/bin/sh
#******************************************************
#*     PIL System
#*     $Id: ILFBANSETHEO,v 1.2 2002/07/23 17:43:01 schumann Exp $
#*
#*     (c) Johann Schumann, Klaus Wagner
#*     TU Muenchen and NASA Ames
#*
#*     $Log: ILFBANSETHEO,v $
#*     Revision 1.2  2002/07/23 17:43:01  schumann
#*     bugfix in fakemail, added -metoo option
#*
#*     Revision 1.1.1.1  2001/07/16 18:16:09  schumann
#*     new CVS project
#*
#
#	"BANSETHEO-ILF   V1.4.0 [from BANSETHEO] 6/18/98"
#	"BANSETHEO-ILF   V1.4.1 [from TUM] 6/18/98"
#	"BANSETHEO-ILF   V1.4.2 [from TUM] 12/9/2000"
#
# ported to TUM 8/29/97
#
#	1.1.2:	new ILF-script
#	1.3.0:  with AUTLOG operators
#	1.3.2:	ilf-server style
#	1.4.0:  local ILF and names of clauses
#	1.4.1: 	karg@nasa
#	1.4.2: 	patch for X[33] output in _pp and -fakemail
#
#*****************************************************/

################################################
#
# places for binaries and such
#
if [ -z "$PILHOME$EMPTY" ] ; then
	PILHOME=`pwd`
	echo "warning: assuming PILHOME=$PILHOME"
	fi

INWASM=inwasm
SAM=sam
#
#	place for setheo2block
#
#
SETHEO2BLOCK=$PILHOME/bin/setheo2block

# for ILF standalone versions
ILFHOME=./
ILFSETHEO2TEX=$ILFHOME/ilfsetheo2tex

PROLOG=pl

CPP=cpp

JOBNR=$$

################################################
# default settings
#

ILFPROOF="y"
	# y if a local version of ILF is used
LOCALILF="n"

FULLPROOF="n"
DEBUG="n"
ITERATE="-wdr"
CPUTIME=120
VERBOSE=n
DEVOUT=/dev/null
EDITILF="n"
FAKEMAIL="y"
METOO=""

############################################################
echo "BANSETHEO-ILF $Id: ILFBANSETHEO,v 1.2 2002/07/23 17:43:01 schumann Exp $"
############################################################
# process arguments                                        #
############################################################
#
ARGS=$*

if [ -z "$ARGS$EMPTY" ] ; then
	echo "usage: ILFBANSETHEO"
	echo "  [-debug]            keep temp files"
	echo "  [-verbose]          display output of modules"
	echo "  [-editilf]          edit ilf-output"
	echo "  [-fullproof]        generate full proof"
	echo "  [-noproof]          do not generate ILF-proof"
	echo "  [-dr]               use -dr iterating (SAM)"
	echo "  [-wdr]              use -wdr iterating (SAM) [default]"
 	echo "  [-cputime number]   CPU-time limit"
	echo "  [-mail]             use ILF-mail-server"
	echo "  [-metoo name]       also send mail to name (req. -mail)"
	echo "  [-fakemail]         only do as if sending an email"
	echo "  file"
	exit 1
	fi

ARGS=$*

while [ -n "$1$EMPTY" ] ; do
	case $1 in
	
	-debug) DEBUG=y 	;;
	-verbose) DEVOUT=""; VERBOSE=y 	;;
	-wdr) ITERATE="-wdr" ;;
	-dr) ITERATE="-dr" ;;
	-cputime) CPUTIME=$2; shift		;;
	-fullproof) FULLPROOF=y ;;
	-noproof) ILFPROOF=n ;;
	-editilf) EDITILF="y" ;;
	-metoo)    METOO=","$2; shift ;;
	-mail)    LOCALILF="n"; FAKEMAIL="n" ;;
	-fakemail)    FAKEMAIL="y" ;;
	-*) echo "ILFBANSETHEO: illegal flag $1 " ; exit 1 ;;
	*) INFILE=$1			;;

	esac

	shift
	done

if [ -z "$INFILE$EMPTY"  ] ; then
	echo "ILFBANSETHEO: no input file"
	exit 2
	fi
	
if [ ! -r $INFILE.lop ] ; then
	echo "ILFBANSETHEO: cannot open file $FILE.lop"
	echo "EXIT_STATUS: cannot open input file"
	exit 2
fi


###########################################################
# dependent variables
#
TMP=TMP-$INFILE

############################################################
clean(){
echo "cleaning up..."
if [ $DEBUG = "n" ] ; then
	/bin/rm -f $TMP*
else
	echo "ILFBANSETHEO: temp files in $TMP"
fi
}


###########################################################
echo "ILFBANSETHEO: processing $INFILE..."
echo "	compiling formula..."

sed -e 's/cons:/cons: /g' $INFILE.lop | \
gawk '
BEGIN{
tdepth=99;
tdepth		=0;
ss_cnt		=0;
encr_cnt		=0;
comb_cnt		=0;
sk_cnt		=0;
inv_cnt		=0;
fresh_cnt		=0;
controls_cnt		=0;
pub_cnt		=0;
recog_cnt	=0;
said_recently_cnt	=1;
said_cnt	=1;
sees_cnt	=1;
}
/cons:/{if (tdepth <$3)tdepth=$3;}
/ss\(/ {ss_cnt++;}
/encr\(/ {encr_cnt++;}
/comb\(/ {comb_cnt++;}
/recog\(/ {recog_cnt++;}
/sk\(/ {sk_cnt++;}
/inv\(/ {inv_cnt++;}
/fresh\(/ {fresh_cnt++;}
/controls\(/ {controls_cnt++;}
/pub\(/ {pub_cnt++;}
/^%BAN-RULES/{
	print "#ifndef ILF_PROOF "
	print "#define ILF_PROOF 0"
	print "#endif"
	print "#define TDEPTH	" tdepth +1
	print "#define ss_cnt	" ss_cnt
	print "#define encr_cnt	" encr_cnt
	print "#define comb_cnt	" comb_cnt
	print "#define sk_cnt	" sk_cnt
	print "#define inv_cnt	" inv_cnt
	print "#define fresh_cnt " fresh_cnt
	print "#define controls_cnt	" controls_cnt
	print "#define pub_cnt	" pub_cnt
	print "#define recog_cnt	" recog_cnt
	print "#define said_recently_cnt	" said_recently_cnt
	print "#define said_cnt	" said_cnt
	print "#define sees_cnt	" sees_cnt
	}
' >$TMP-1

sed -e 's/#clausename\(.*\)$/%clausename\1/' \
    -e 's/# conj/%clausename conj/' \
    -e '/^#[ 	]*[1-9][1-9]*/d' \
	$INFILE.lop >>$TMP-1

$CPP $TMP-1 >$TMP-search.lop


if [ $VERBOSE = "y" ] ; then
  echo "----------------------------------------------------------------"
fi
$INWASM -cons $TMP-search >$DEVOUT 2>&1
if [ $VERBOSE = "y" ] ; then
  echo "----------------------------------------------------------------"
fi

if [ $? != 0 ] ; then
	echo "ILFBANSETHEO: error during run of inwasm"
	clean
	exit 5
	fi

echo "	starting SAM..."
echo "----------------------------------------------------------------"

if [ $FULLPROOF = "y" ] ; then
	$SAM -batch -reg -st $ITERATE -cputime $CPUTIME $TMP-search
else
	$SAM -hide oneof -hide subset -batch \
             -reg -st $ITERATE -cputime $CPUTIME $TMP-search
fi
echo "----------------------------------------------------------------"

if [ $? != 0 ] ; then
	echo "no proof found"
	mv $TMP-search.log $INFILE.log
	clean
	exit 6
	fi

mv $TMP-search.tree $INFILE.tree
mv $TMP-search.log $INFILE.log

#################################################
# ILF processing
#################################################
if [ $ILFPROOF = "n" ] ;
	then
	echo "ILFBANSETHEO finished - no proof output"
	clean
	exit 0
	fi

if [ ! -f $INFILE.ilf ] ; then
	echo "ILFBANSETHEO: sorry, ILF-TEX-OPS are missing"
	clean
	exit 8
	fi


/bin/rm -f $TMP.pr3

echo "processing proof..."

if [ $VERBOSE = "y" ] ; then
	echo "processing proof with job number = $JOBNR"
fi
#
# analyzing the _pp.lop file, creating the contrapositive information
#
echo "	analyzing contrapositives..."
#
# must redo the CPP
echo '#define ILF_PROOF 1' >$TMP-2
cat  $TMP-1 >>$TMP-2
$CPP $TMP-2 |\
sed -e '/^#[ 	]*[1-9][1-9]*/d' \
    -e 's/^%clause/#clause/'  \
	>>$TMP-ilf.lop

$INWASM -lop $TMP-ilf >/dev/null 2>&1

  sed -e '/#/d' \
      -e s@'?-'@'query :-'@g \
      -e s@'<-[ 	]*\.'@' .'@g \
      -e s@'\.'@' '@g \
      -e s@'<-'@' :- '@g \
      -e s@'/\*-'@''@g \
      -e s@'-\*/'@''@g \
      -e s@'^\([0-9]\)'@'NEW \1'@g \
      -e s@'^  \([0-9]\)'@'NEW \1'@g \
    -e 's/__principal//g' \
    -e 's/__nonce//g' \
    -e 's/__key//g' \
    -e 's/\([A-Z][A-Za-z0-9_]*\)\[[0-9][0-9]*\]/\1'/g \
      ${TMP}-ilf_pp.lop |\
  awk '
{ 
if ($1 ~ /^NEW$/) { 
  printf(")).\n"); 
  printf("proof([%s,cl(%s,%s)],predecessors,[[%d,ax_nr(%s)]]).\n",job,$2,$3,job,$2); 
  printf("proof([%s,cl(%s,%s)],status,contra).\n",job,$2,$3); 
  printf("proof([%s,cl(%s,%s)],contents,( %s %s ",job,$2,$3,$4,$5); 
  } 
else { 
  printf("%s ",$3) 
  } 
} 

END {
  printf(")).\n")
  } ' job=$JOBNR|\
  sed -e '/^ *))\.$/d' \
      -e s@'~'@'not '@g \
  >> ${TMP}.pr3

#
# analyzing the .lop file, creating the axiom information
#
echo "	analyzing the axioms..."
  sed -e '/^#[^c]/d' \
      -e 's/^#clausename/_____clausename/' $TMP-ilf.lop |\
  $CPP | sed -e '/^#/d' -e '/^%/d' \
      -e s@'<-[ 	]*\.'@' .'@g \
      -e s@'<-'@' :- '@g \
      -e s@'\.'@' NEW'@g \
    -e 's/__principal//g' \
    -e 's/__nonce//g' \
    -e 's/__key//g' |\
  awk '
BEGIN { 
  counter = 1;
  newaxiom = 1;
  clausename = "";
  } 
/^_____/{
	clausename = $2;
	}
!/^_____/{ 
for (i=1;i<=NF;i++) {
  if ($i ~ /NEW/) { 
    counter += 1;
    newaxiom = 1;
#    printf("'\'')).\n");
    printf(")).\n");
    } 
  else { 
    if (newaxiom == 1) { 
      newaxiom = 0;
      printf("proof([%s,ax_nr(%s)],predecessors,[]).\n",job,counter); 
      printf("proof([%s,ax_nr(%s)],status,axiom(%s)).\n", job,counter, clausename); 
#      printf("proof([%s,ax_nr(%s)],contents,('\''",job,counter); 
      printf("proof([%s,ax_nr(%s)],contents,(",job,counter); 
      }
    printf("%s ",$i); 
    } 
  } 
} ' job=$JOBNR |\
  sed -e s@'~'@'not '@g \
  >> ${TMP}.pr3

#
# analyzing the .tree file, that is the main part of the proof
#
echo "	analyzing the proof tree..."
sed -e 's/__principal//g' \
    -e 's/__nonce//g' \
    -e 's/__key//g' \
	${INFILE}.tree |\
  grep -v '^$' |\
  grep '[a-z]' |\
  sed -e 's@  @? @g' |\
  awk '{\
    for (i=1;$i !~ /\[.*/;i++) anf=i;\
    printf("%d",anf+1);\
    for (j=anf+1;j<=NF;j++) printf(" %s",$j);\
    printf("\n");\
  }' |\
  sed -e 's@, \[@ @g' \
      -e 's@,\[@ @g' \
      -e 's@ , @ @g' \
      -e 's@ ,$@ @g' \
      -e 's@\[@@g' \
      -e 's@\]@@g' \
      -e 's@ext__([0-9]*\.[0-9]*,\([0-9]*\)\.\([0-9]*\))@ext \1 \2@g' \
      -e 's@red__([0-9]*\.[0-9]*,\([0-9]*\) )@red \1@g' \
      -e 's@fac__([0-9]*\.[0-9]*,\([0-9]*\) )@fac \1@g' \
      -e 's@query__@query@g' |\
  awk '
{
if ($1 == 1) {
  printf("proof([%s,%d],predecessors,[[%d,cl(%d,%d)]]).\n",job,$3,job,$5,$6); 
  printf("proof([%s,%d],status,ext).\n",job,$3); 
  printf("proof([%s,%d],contents,%s).\n",job,$3,$2); 
}
if ($1 > 1 && NF > 2 && $4 ~ /ext/) {
  printf("proof([%s,%d],predecessors,[[%d,cl(%d,%d)],[%s,%d]]).\n",job,$3,job,$5,$6,job,last[($1)-1]); 
  printf("proof([%s,%d],status,ext).\n",job,$3); 
  printf("proof([%s,%d],contents,%s).\n",job,$3,$2); 
}
if ($1 > 1 && NF > 2 && $4 !~ /ext/) {
  printf("proof([%s,%d],predecessors,[[%s,%d]]).\n",job,$3,job,last[($1)-1]); 
  if ($4 ~ /red/) printf("proof([%s,%d],status,red([%d,%d])).\n",job,$3,job,$5); 
  if ($4 ~ /fac/) printf("proof([%s,%d],status,fac([%d,%d])).\n",job,$3,job,$5); 
  printf("proof([%s,%d],contents,%s).\n",job,$3,$2); 
}
if ($1 > 1 && NF == 2) {
  printf("proof([%s,'%d001'],predecessors,[[%d,%d]]).\n",job,last[($1)-1],job,last[($1)-1]); 
  printf("proof([%s,'%d001'],status,none).\n",job,last[($1)-1]); 
  printf("proof([%s,'%d001'],contents,%s).\n",job,last[($1)-1],$2); 
}
if (NF >= 3) last[$1]=$3; 
}' job=$JOBNR |\
  sed -e 's@~@not @g' \
  >> ${TMP}.pr3
  
#
# prepare output file for ILF
#
if [ $LOCALILF = "y" ] ; then
	ILFRC=$TMP.ilfrc
	ILFOUT=$TMP.out
	echo "proof([$JOBNR, global], system, [setheo, me2bl])." \
		>$ILFOUT
else
	ILFRC=$TMP.block
	ILFOUT=$TMP.block
	echo "NOSH" > $ILFRC
	echo "ILF-SERV" >> $ILFRC
	echo "SYSTEM proof_block" >> $ILFRC
fi

#
# initial stuff 
#
echo "ILF_STATE" >> $ILFRC
echo 'tex_format "\\\\documentstyle{article}\\n \\\\newcommand{\\\\bel}{|\\\\!\\\\!\\\\!\\\\equiv} \\\\newcommand{\\\\sees}{\\\\triangleleft} \\\\newcommand{\\\\said}{|\\\\!\\\\!\\\\!\\\\sim} \\\\newcommand{\\\\saidrecently}{|\\\\!\\\\!\\\\!\\\\approx} \\\\newcommand{\\\\controls}{|\\\\!\\\\!\\\\!\\\\Rightarrow}\\n"' \
	>>$ILFRC
 
############################
# prepare TEXOPS
############################
# xfy	1050	':-'	:- "\\\\Leftarrow\\\\ \\\\ "
cat <<! >> $ILFRC
END_ILF_STATE

SIGNATURE
<-	xfy	1050
<-	fx	1050
END_SIGNATURE


TEXOP
	
xfy	1050	'<-'	:- "\\\\leftarrow"
fy	800	holds	:- "\\\\vdash\\\\ "
fy	800	fresh	:- "\\\\#"
xfy	800	 bel	:- "\\\\bel\\\\ "
xfy	800 	said	:- "\\\\said\\\\ "
xfy	800 	said_recently	:- "\\\\saidrecently\\\\ "
xfy	800 	sees	:- "\\\\sees\\\\ "
xfy	800 	controls :- "\\\\controls\\\\ "
xfy	800 	subset :- "\\\\sqsubseteq\\\\ "

xfy	800 	low_level_subset :- "\\\\stackrel{---,\\\\sqsubseteq}\\\\ "
xfy	800 	low_level_singleton :- "\\\\stackrel{---,\\\\in}\\\\ "

struct	800	recog(X) :- "\\\\rho(",z(X),")"
struct	800	inv(X) :- z(X),"^{-1}"
struct	800	encr(X,K) :- "\\\\{",z(X),"\\\\}_{",z(K),"}"
struct	800	comb(X,Y) :- "\\\\langle ",z(X),"\\\\rangle_{",z(Y),"}"
struct	800	oneof(X,Y)	:-  z(X),"\\\\in\\\\{",z(Y),"\\\\}"
struct	800	sk(A,B,C) :- z(A),"\\\\stackrel{",z(C),"}\\\\leftrightarrow ",z(B)
struct	800	ss(A,B,C) :- z(A),"\\\\stackrel{",z(C),"}\\\\rightleftharpoons ",z(B)

struct	_	and(U,nil) :- z(U)
struct	_	and(X,and(Y,Z)) :- "\\\\{",z(ilf_and(and(X,and(Y,Z))))
struct	_	and(U,V) :- "\\\\{",z(U),",",z(V),"\\\\}"

struct	_	ilf_and(and(X,nil)) :- z(X),"\\\\}"
struct	_	ilf_and(and(X,Y)) :- z(X),",",z(ilf_and(Y))

struct	_	nil	:- "\\\\langle\\\\rangle"

struct _ message_1  :- "\\\\mbox{\\\\em Message\$_1\$}"
struct _ message_2  :- "\\\\mbox{\\\\em Message\$_2\$}"
struct _ message_3  :- "\\\\mbox{\\\\em Message\$_3\$}"
struct _ message_4  :- "\\\\mbox{\\\\em Message\$_4\$}"
struct _ message_5  :- "\\\\mbox{\\\\em Message\$_5\$}"
struct _ message_6  :- "\\\\mbox{\\\\em Message\$_6\$}"
struct _ message_7  :- "\\\\mbox{\\\\em Message\$_7\$}"
struct _ message_8  :- "\\\\mbox{\\\\em Message\$_8\$}"

struct _ assumption_1  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_2  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_3  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_4  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_5  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_6  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_7  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_8  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_9  :- "\\\\mbox{\\\\em Assumption\$_2\$}"
struct _ assumption_10  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"
struct _ assumption_11  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"
struct _ assumption_12  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"
struct _ assumption_13  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"
struct _ assumption_14  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"
struct _ assumption_15  :- "\\\\mbox{\\\\em Assumption\$_{10}\$}"

struct _ query_1  :- "\\\\mbox{\\\\em Conjecture\$_1\$}"
struct _ query_2  :- "\\\\mbox{\\\\em Conjecture\$_2\$}"
struct _ query_3  :- "\\\\mbox{\\\\em Conjecture\$_3\$}"
struct _ query_4  :- "\\\\mbox{\\\\em Conjecture\$_4\$}"
struct _ query_5  :- "\\\\mbox{\\\\em Conjecture\$_5\$}"
struct _ query_6  :- "\\\\mbox{\\\\em Conjecture\$_6\$}"
struct _ query_7  :- "\\\\mbox{\\\\em Conjecture\$_7\$}"
struct _ query_8  :- "\\\\mbox{\\\\em Conjecture\$_8\$}"
struct _ query_9  :- "\\\\mbox{\\\\em Conjecture\$_9\$}"

struct _ message_meaning :- "\\\\mbox{\\\\em Message-Meaning}"
struct _ nonce_verification :- "\\\\mbox{\\\\em Nonce-Verification}"
struct _ jurisdiction :- "\\\\mbox{\\\\em Jurisdiction}"
struct _ freshness :- "\\\\mbox{\\\\em Freshness}"
struct _ sees_components :- "\\\\mbox{\\\\em Sees}"
struct _ symmetry :- "\\\\mbox{\\\\em Symmetry}"
struct _ break_up_message :- "\\\\mbox{\\\\em Submessage}"
struct _ sees_components_uncertified :- "\\\\mbox{\\\\em Sees-Uncertified}"
struct _ low_level_subset :- "\\\\mbox{\\\\em Subset}"
struct _ low_level_singleton :- "\\\\mbox{\\\\em Subset}"
struct _ oneof :- "\\\\mbox{\\\\em Oneof}"
!

#struct	800	oneof(X,Y)	:-  z(X)," = \\\\iota(",z(Y),")"

####################################
# include generated formatting-info
#
sed -e 's/__principal//g' \
    -e 's/__nonce//g' \
    -e 's/__key//g' \
     $INFILE.ilf >>$ILFRC
	
echo "END_TEXOP" >>$ILFRC

if [ $LOCALILF = "n" ] ; then
	echo "FILE .out" >> $ILFRC
fi

echo "proof(["$JOBNR",global],goal,query)." >> ${TMP}.pr3
echo "proof(["$JOBNR",global],system,[setheo])." >> ${TMP}.pr3
echo "proof(["$JOBNR",global],control,proved)." >> ${TMP}.pr3
echo "proof(["$JOBNR",global],control,ready)." >> ${TMP}.pr3


#
# converting the generic model elimination proof into block calculus
#
echo "	converting into block calculus..."

cat ${TMP}.pr3 | \
  $SETHEO2BLOCK | sed -e 's/|://g'\
  >> $ILFOUT

#
# add some technical stuff for the ILF mail server
#
if [ $LOCALILF = "n" ] ; then
	echo "END_FILE" >> $ILFOUT

	if [ $EDITILF = "y" ] ; then
		vi $ILFOUT
		echo "Do you want to mail that file? (y/n) [y]"
		read ANS
		if [ $ANS$EMPTY = "n" ] ; then
			echo "ILFBANSETHEO: finishing..."
			clean
			exit 0
		fi
	fi
	
	if [ $FAKEMAIL = "y" ] ; then
		echo "we do not send any email -- sorry no proof available"
	else
		echo "sending mail to ILF-SERVER..."
		mail -s  "ilf-request: $INFILE" \
	    		ilf-serv@mathematik.hu-berlin.de$METOO <$ILFOUT
	fi
else
	if [ $EDITILF = "y" ] ; then
		vi $ILFRC
		vi $ILFOUT
	fi
	echo "converting to LaTeX..."
	$ILFSETHEO2TEX $TMP >$DEVOUT 2>&1
	mv -f $TMP.tex $INFILE.tex
fi

echo "ILFBANSETHEO successfully finished."

clean

exit 0
